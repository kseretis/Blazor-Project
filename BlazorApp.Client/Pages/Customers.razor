@page "/Customers"
@rendermode InteractiveAuto
@using BlazorApp.Shared.Dtos
@inject CustomerApiService CustomerApiService;

<h3>Customers</h3>

@if (IsExceptionAlertVisible)
{
    <Alert Color="AlertColor.Danger"> Error: @ErrorMessage </Alert>
} 
else @if (!CustomersDto.Any())
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <Grid TItem="CustomerDto"
          Class="table table-hover table-bordered table-striped"
          Data="CustomersDto"
          AllowFiltering="true"
          AllowPaging="true"
          PageSize="10"
          AllowSorting="true"
          AllowSelection="false"
          SelectionMode="GridSelectionMode.Single"
          AllowRowClick="true"
          OnRowClick="@((args) => OpenUpdateCustomerModal(args.Item))"
          Responsive="true"
          EmptyText="No records to display">

        <GridColumns>
            <GridColumn TItem="CustomerDto" HeaderText="Id" PropertyName="Id" SortKeySelector="item => item.Id">
                @context.Id
            </GridColumn>
            <GridColumn TItem="CustomerDto" HeaderText="CompanyName" PropertyName="CompanyName" SortKeySelector="item => item.CompanyName">
                @context.CompanyName
            </GridColumn>
            <GridColumn TItem="CustomerDto" HeaderText="ContactName" PropertyName="ContactName" SortKeySelector="item => item.ContactName">
                @context.ContactName
            </GridColumn>
            <GridColumn TItem="CustomerDto" HeaderText="Address" PropertyName="Address" SortKeySelector="item => item.Address">
                @context.Address
            </GridColumn>
            <GridColumn TItem="CustomerDto" HeaderText="City" PropertyName="City" SortKeySelector="item => item.City">
                @context.City
            </GridColumn>
            <GridColumn TItem="CustomerDto" HeaderText="Region" PropertyName="Region" SortKeySelector="item => item.Region">
                @context.Region
            </GridColumn>
            <GridColumn TItem="CustomerDto" HeaderText="PostalCode" PropertyName="PostalCode" SortKeySelector="item => item.PostalCode">
                @context.PostalCode
            </GridColumn>
            <GridColumn TItem="CustomerDto" HeaderText="Country" PropertyName="Country" SortKeySelector="item => item.Country">
                @context.Country
            </GridColumn>
            <GridColumn TItem="CustomerDto" HeaderText="Phone" PropertyName="Phone" SortKeySelector="item => item.Phone">
                @context.Phone
            </GridColumn>
            <GridColumn TItem="CustomerDto" HeaderText="Actions" PropertyName="Actions" SortKeySelector="item => item.Id" Sortable="false" Filterable="false">
                <div @onclick:stopPropagation="true">
                    <Button Color="ButtonColor.Danger" Outline="true" @onclick="@(() => ShowDeleteCustomerConfirmationDialog(@context.Id))"><Icon Name="IconName.Trash"/></Button>
                </div>
            </GridColumn>
        </GridColumns>
    </Grid>
}

<UpdateCustomerModal @ref="UpdateCustomerModal" OnSave="UpdateCustomers"/>

<ConfirmDialog @ref="DeleteCustomerConfirmDialog" />

@code {
    private IEnumerable<CustomerDto> CustomersDto { get; set; } = [];
    private UpdateCustomerModal UpdateCustomerModal { get; set; } = null!;
    private ConfirmDialog DeleteCustomerConfirmDialog { get; set; }= null!;
    private bool IsExceptionAlertVisible { get; set; }
    private string ErrorMessage { get; set; } = string.Empty;
 
    protected override async Task OnInitializedAsync()
    {
        await UpdateCustomers();
    }
    
    private void OpenUpdateCustomerModal(CustomerDto customerDto)
    {
        UpdateCustomerModal!.CustomerDto = customerDto;
        UpdateCustomerModal.Show();
    }
    
    private async Task UpdateCustomers()
    {
        try
        {
            CustomersDto = await CustomerApiService.GetCustomersAsync();
        } catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            IsExceptionAlertVisible = true;
        }
    }
    
    private async Task ShowDeleteCustomerConfirmationDialog(int? id)
    {
        var options = new ConfirmDialogOptions { Size = DialogSize.Small };

        var confirmation = await DeleteCustomerConfirmDialog.ShowAsync(
            title: "Delete Customer",
            message1: $"Are you sure you want to delete customer with ID {id} ?",
            confirmDialogOptions: options);

        if (!confirmation)
        {
            return;
        }

        try
        {
            await CustomerApiService.DeleteCustomerAsync(id!.Value);
            CustomersDto = await CustomerApiService.GetCustomersAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            IsExceptionAlertVisible = true;
        }
    }
}
